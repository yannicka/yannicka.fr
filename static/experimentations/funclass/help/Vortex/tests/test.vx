/* regular factorial */
let rec fact = fn n ->
    if n == 0 ->
        1
    else {
        /* a test for statement block codegen */
        print("hai from fact")
        -> n * fact(n - 1)
    }

/* tail recursive factorial */
let rec fact_tail = fn n, acc = 1 {
    -> if n == 0 ->
        acc
    else ->
        fact_tail(n - 1, n * acc)
}

/* ackermann function */
let rec ack = fn m, n ->
    if m == 0 ->
        n + 1
    else if n == 0 ->
        ack(m - 1, 1)
    else ->
        ack(m - 1, ack(m, n - 1))

let fun = fn a, b, c -> a + b * c

print("hello world!")
print("regular factorial", fact(6))
print("tail recursive factorial", fact_tail(6))
print("ack(1, 2)", ack(1, 2))
print("fun", fun(5, 10, 15))

let defargs = fn a, b, c = 5, d = "hello", e = c * c ->
    print(a, b, c, d, e)

defargs(66)
defargs(66, 67)
defargs(66, 67, 169)
defargs(66, 67, 170, "world")
defargs(66, 67, 171, "world", 81)
defargs(66, 67, nil, "hai", nil)

let defvarargs = fn a, b = 5, c = b * (b + 1), ... {
    print("regular", a, b, c)
    print("varargs", ...)
}

defvarargs(150)
defvarargs(150, 10)
defvarargs(150, 10, "something", "something else", 3.14)

let block1 = fn a -> {
    print("foo")
    let x = a * a
    -> x
}

// fn a, b -> { ... } is a valid form as well
let block2 = fn a, b {
    print("hello")
    print("world")
    return (a + b, a - b, a * b, a / b)
}

/* again, fn -> { ... } is a valid form
 * let's test long comments here when at it
 */
let rec block_tail = fn {
    -> block_tail()
}

print(block1(5))
print(block2(6, 7))

let blk = {
    print("hi from a block")
    -> 5
}
print("block ret", blk)

let i = 0
while i < 5 -> print("hello from the loop", i += 1)
while i > 150 {
    print("more hellos")
    let a = 150
}
i += i * 2
print(i)

print(__FILE__, __LINE__)

let tbl = [
    5, 10, 15, 20, sneaky_one = "hi!", 25 * 3, 30, another = 631, 35,
    foo = "haaaaaaaa", 40, 45, 50, some_assoc = "fun fun fun fun"
]
print(table["concat"](tbl, ", "))
print(tbl[2], tbl["sneaky_one"])

let foo = fn {
    print("foo")
    -> 2
}
tbl[foo()] += 15
print(tbl[2])

print(i += 10, i += 324, i, i * 3)

let (a, b, c, d, e, f) = seq {
    yield (5, 10, 15)
    yield ("hello", 3.14)
    yield fact(6)
}
print(a, b, c, d, e, f)
print(_L, _G, _R, _VERSION)
