// Generated by CoffeeScript 1.7.1
(function() {
  var Animation, Entity, Game, Sprite, Tile, TileAnimated, game, player, preload_images, rgb,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  CanvasRenderingContext2D.prototype.draw_image_index = function(img, width, height, index, x, y, draw) {
    var basex, basey, nbtiles;
    if (draw == null) {
      draw = true;
    }
    nbtiles = Math.ceil(img.width / width);
    basex = index % nbtiles;
    basex = basex * width;
    basey = Math.floor(index / nbtiles);
    basey = basey * height;
    if (draw) {
      return this.drawImage(img, basex, basey, width, height, x, y, width, height);
    } else {
      return {
        nbtiles: nbtiles,
        basex: basex,
        basey: basey
      };
    }
  };

  CanvasRenderingContext2D.prototype.get2darray_image = function(img) {
    var a, b, g, i, list_pixels, map, r, x, y, _i, _ref;
    this.save();
    this.drawImage(img, 0, 0);
    list_pixels = this.getImageData(0, 0, img.width, img.height).data;
    map = [];
    for (i = _i = 0, _ref = list_pixels.length; _i < _ref; i = _i += 4) {
      r = list_pixels[i + 0];
      g = list_pixels[i + 1];
      b = list_pixels[i + 2];
      a = list_pixels[i + 3];
      x = Math.floor((i / 4) % img.width);
      y = Math.floor(((i - x) / 4) / img.width);
      if (map[x]) {
        map[x][y] = [r, g, b, a];
      } else {
        map[x] = [[r, g, b, a]];
      }
    }
    this.restore();
    return map;
  };

  CanvasRenderingContext2D.prototype.fill_wrap_text = function(text, x, y, maxWidth, lineHeight) {
    var line, metrics, n, testLine, testWidth, words, _i, _ref;
    words = text.split(' ');
    line = '';
    for (n = _i = 0, _ref = words.length; 0 <= _ref ? _i < _ref : _i > _ref; n = 0 <= _ref ? ++_i : --_i) {
      testLine = line + words[n] + ' ';
      metrics = this.measureText(testLine);
      testWidth = metrics.width;
      if (testWidth > maxWidth) {
        this.fillText(line, x, y);
        line = words[n] + ' ';
        y += lineHeight;
      } else {
        line = testLine;
      }
    }
    return this.fillText(line, x, y);
  };

  CanvasRenderingContext2D.prototype.tile_from_position = function(img, width, height, x, y) {
    var tile_by_line;
    tile_by_line = Math.ceil(img.width / (width + 1));
    x = Math.floor(x / (width + 1));
    y = Math.floor(y / (height + 1));
    return x + (y * tile_by_line);
  };

  Math.clamp = function(min, val, max) {
    return Math.max(min, Math.min(max, val));
  };

  Math.sign = function(x) {
    var _ref, _ref1;
    return (_ref = x === 0) != null ? _ref : {
      0: (_ref1 = x > 0) != null ? _ref1 : {
        1: -1
      }
    };
  };

  Math.between = function(min, val, max) {
    return val >= min && val <= max;
  };

  Math.rand = function(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  };

  rgb = function(r, g, b, a) {
    if (a == null) {
      a = 1;
    }
    if (a === 1) {
      return 'rgb(' + r + ', ' + g + ', ' + b + ')';
    } else {
      return 'rgba(' + r + ', ' + g + ', ' + b + ', ' + a + ')';
    }
  };

  preload_images = function(images, callback) {
    var i, image_loaded, nb_images_loaded, nb_images_to_load, new_image_loaded, preload;
    nb_images_loaded = 0;
    nb_images_to_load = Object.keys(images).length;
    image_loaded = [];
    new_image_loaded = function() {
      nb_images_loaded++;
    };
    for (i in images) {
      image_loaded[i] = new Image();
      image_loaded[i].onload = new_image_loaded;
      image_loaded[i].src = images[i];
    }
    preload = function() {
      if (nb_images_loaded === nb_images_to_load) {
        callback();
      } else {
        setTimeout(preload, 100);
      }
    };
    preload();
    return image_loaded;
  };

  window.rgb = rgb;

  window.preload_images = preload_images;

  Animation = (function() {
    function Animation(name, index, length, speed) {
      if (speed == null) {
        speed = 20;
      }
      this.start_index = index;
      this.length = length;
      this.speed = speed;
      this.time_anim = 0;
      this.index = 0;
    }

    Animation.prototype.update = function() {
      this.time_anim++;
      if (this.time_anim > this.speed) {
        this.time_anim = 0;
        this.index++;
        if (this.index >= this.start_index + this.length) {
          return this.index = this.start_index;
        }
      }
    };

    return Animation;

  })();

  Sprite = (function() {
    function Sprite(name) {
      this.name = name;
      this.animations = [];
      this.cur_animation = null;
    }

    Sprite.prototype.add_animation = function(name, index, length, speed) {
      return this.animations.push(new Animation(name, index, length, speed));
    };

    Sprite.prototype.play = function(name) {
      if (this.animations[name] != null) {
        return this.cur_animation = this.animations[name];
      }
    };

    Sprite.prototype.update = function() {
      return this.cur_animation.update();
    };

    return Sprite;

  })();

  Entity = (function() {
    function Entity(sprite) {
      this.sprite = sprite;
    }

    Entity.prototype.add_animation = function(name, index, length, speed) {
      return this.sprite.add_animation(name, index, length, speed);
    };

    Entity.prototype.play = function(name) {
      return this.sprite.play(name);
    };

    Entity.prototype.update = function() {
      return this.sprite.update();
    };

    return Entity;

  })();

  player = new Entity();

  player.add_animation('walk_left', 0, 3);

  player.add_animation('walk_up', 3, 3);

  player.add_animation('walk_right', 6, 3);

  player.add_animation('walk_down', 9, 3);

  player.play(walk_down);

  Tile = (function() {
    function Tile(x, y, id) {
      this.x = x;
      this.y = y;
      this.id = id;
    }

    return Tile;

  })();

  TileAnimated = (function(_super) {
    __extends(TileAnimated, _super);

    function TileAnimated(x, y, id, length, speed) {
      if (speed == null) {
        speed = 20;
      }
      TileAnimated.__super__.constructor.call(this, x, y, id);
      this.start_id = this.id;
      this.length = length;
      this.time_anim = 0;
      this.speed = 20;
    }

    TileAnimated.prototype.update = function() {
      this.time_anim++;
      if (this.time_anim > this.speed) {
        this.time_anim = 0;
        this.id++;
        if (this.id >= this.start_id + this.length) {
          return this.id = this.start_id;
        }
      }
    };

    return TileAnimated;

  })(Tile);

  Game = (function() {
    function Game() {
      this.draw = __bind(this.draw, this);
      this.update = __bind(this.update, this);
      this.create = __bind(this.create, this);
      var anims, tile, x, y, _i, _j, _ref, _ref1;
      this.can = document.getElementById('game');
      this.ctx = this.can.getContext('2d');
      this.can.width = 640;
      this.can.height = 480;
      this.map = [[0, 1, 2, 3, 4, 5, 6, 7, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]];
      anims = {
        4: 3
      };
      this.solid = [2, 4, 7];
      this.tiles = [];
      this.tiled_animated = [];
      for (y = _i = 0, _ref = this.map.length; 0 <= _ref ? _i < _ref : _i > _ref; y = 0 <= _ref ? ++_i : --_i) {
        for (x = _j = 0, _ref1 = this.map[y].length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; x = 0 <= _ref1 ? ++_j : --_j) {
          if (anims[this.map[y][x]]) {
            this.tiles.push(new TileAnimated(x, y, this.map[y][x], anims[this.map[y][x]]));
          } else {
            this.tiles.push(new Tile(x, y, this.map[y][x]));
          }
        }
      }
      this.tiled_animated = (function() {
        var _k, _len, _ref2, _results;
        _ref2 = this.tiles;
        _results = [];
        for (_k = 0, _len = _ref2.length; _k < _len; _k++) {
          tile = _ref2[_k];
          if (tile instanceof TileAnimated) {
            _results.push(tile);
          }
        }
        return _results;
      }).call(this);
      this.img = preload_images({
        'tileset': 'game/gfx/tileset.png'
      }, this.create);
    }

    Game.prototype.create = function() {
      return this.update();
    };

    Game.prototype.update = function() {
      var tile, _i, _len, _ref;
      this.draw();
      _ref = this.tiled_animated;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tile = _ref[_i];
        tile.update();
      }
      return requestAnimationFrame(this.update);
    };

    Game.prototype.draw = function() {
      var tile, _i, _len, _ref;
      _ref = this.tiles;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tile = _ref[_i];
        this.ctx.draw_image_index(this.img.tileset, 16, 16, tile.id, tile.x * 16, tile.y * 16);
      }
    };

    return Game;

  })();

  game = new Game();

}).call(this);
