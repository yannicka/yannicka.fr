// Generated by CoffeeScript 1.7.1
(function() {
  var Game, Keyboard,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.rgb = function(r, g, b, a) {
    if (a == null) {
      a = 1;
    }
    if (a === 1) {
      return 'rgb(' + r + ', ' + g + ', ' + b + ')';
    } else {
      return 'rgba(' + r + ', ' + g + ', ' + b + ', ' + a + ')';
    }
  };

  Math.rand = function(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  };

  window.Key = {
    TAB: 9,
    ENTER: 13,
    SHIFT: 16,
    CTRL: 17,
    ALT: 18,
    ESC: 27,
    SPACE: 32,
    LEFT: 37,
    UP: 38,
    RIGHT: 39,
    DOWN: 40,
    A: 65,
    B: 66,
    C: 67,
    D: 68,
    E: 69,
    F: 70,
    G: 71,
    H: 72,
    I: 73,
    J: 74,
    K: 75,
    L: 76,
    M: 77,
    N: 78,
    O: 79,
    P: 80,
    Q: 81,
    R: 82,
    S: 83,
    T: 84,
    U: 85,
    V: 86,
    W: 87,
    X: 88,
    Y: 89,
    Z: 90,
    NUM0: 48,
    NUM1: 49,
    NUM2: 50,
    NUM3: 51,
    NUM4: 52,
    NUM5: 53,
    NUM6: 54,
    NUM7: 55,
    NUM8: 56,
    NUM9: 57,
    NUMPAD0: 96,
    NUMPAD1: 97,
    NUMPAD2: 98,
    NUMPAD3: 99,
    NUMPAD4: 100,
    NUMPAD5: 101,
    NUMPAD6: 102,
    NUMPAD7: 103,
    NUMPAD8: 104,
    NUMPAD9: 105,
    ADD: 107,
    SUB: 109,
    MUL: 106,
    DIV: 111,
    CAPSLOCK: 20,
    PAGEUP: 33,
    PAGEDOWN: 34,
    END: 35,
    HOME: 36,
    ISERT: 45,
    DELETE: 46,
    NUMLOCK: 144
  };

  Keyboard = (function() {
    function Keyboard() {
      this.onkeydown = __bind(this.onkeydown, this);
      this.onkeyup = __bind(this.onkeyup, this);
      this.keys = [];
      this.last = 0;
      this.ktime = 0;
      document.addEventListener('keydown', this.onkeydown, false);
      document.addEventListener('keyup', this.onkeyup, false);
    }

    Keyboard.prototype.update = function() {
      return this.ktime++;
    };

    Keyboard.prototype.onkeyup = function(e) {
      return this.keys[e.keyCode] = null;
    };

    Keyboard.prototype.onkeydown = function(e) {
      return this.keys[e.keyCode] = this.ktime;
    };

    Keyboard.prototype.up = function(k) {
      return this.keys[this.str_to_code(k.toUpperCase())] == null;
    };

    Keyboard.prototype.down = function(k) {
      return this.keys[this.str_to_code(k.toUpperCase())] != null;
    };

    Keyboard.prototype.press = function(k) {
      return this.keys[this.str_to_code(k.toUpperCase())] === this.ktime;
    };

    Keyboard.prototype.str_to_code = function(k) {
      if (Key[k]) {
        return Key[k];
      } else {
        return null;
      }
    };

    return Keyboard;

  })();

  Game = (function() {
    function Game() {
      this.update = __bind(this.update, this);
      this.can = document.getElementById('game');
      this.ctx = this.can.getContext('2d');
      this.width = 350;
      this.height = 350;
      this.scale = 1;
      this.cell_size = 73;
      this.can.width = this.width * this.scale;
      this.can.height = this.height * this.scale;
      this.ctx.scale(this.scale, this.scale);
      this.cells = [[0, 2, 0, 2], [0, 0, 0, 0], [4, 0, 2, 8], [0, 0, 0, 0]];
      this.kb = new Keyboard();
      this.colors = [rgb(255, 255, 255), rgb(0, 0, 0), rgb(0, 0, 0), rgb(60, 60, 60), rgb(200, 0, 0), rgb(0, 200, 0), rgb(0, 0, 200), rgb(255, 0, 0), rgb(180, 180, 180)];
      this.create();
    }

    Game.prototype.create = function() {
      return this.update();
    };

    Game.prototype.update = function() {
      var choice_cell, free_cells, i, x, y, _aa, _ab, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _ref, _ref1, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9, _s, _t, _u, _v, _w, _x, _y, _z;
      if (this.kb.press('left')) {
        for (i = _i = 0; _i < 4; i = ++_i) {
          for (y = _j = 0, _ref = this.cells.length; 0 <= _ref ? _j < _ref : _j > _ref; y = 0 <= _ref ? ++_j : --_j) {
            for (x = _k = 1, _ref1 = this.cells[y].length; 1 <= _ref1 ? _k < _ref1 : _k > _ref1; x = 1 <= _ref1 ? ++_k : --_k) {
              if (this.cells[y][x - 1] === 0) {
                this.cells[y][x - 1] = this.cells[y][x];
                this.cells[y][x] = 0;
              } else if (this.cells[y][x - 1] === this.cells[y][x]) {
                this.cells[y][x - 1] *= 2;
                this.cells[y][x] = 0;
              }
            }
          }
        }
        free_cells = [];
        for (y = _l = 0, _ref2 = this.cells.length; 0 <= _ref2 ? _l < _ref2 : _l > _ref2; y = 0 <= _ref2 ? ++_l : --_l) {
          for (x = _m = 0, _ref3 = this.cells[y].length; 0 <= _ref3 ? _m < _ref3 : _m > _ref3; x = 0 <= _ref3 ? ++_m : --_m) {
            if (this.cells[y][x] === 0) {
              free_cells.push({
                x: x,
                y: y
              });
            }
          }
        }
        choice_cell = free_cells[Math.rand(0, free_cells.length - 1)];
        this.cells[choice_cell.y][choice_cell.x] = 2;
      } else if (this.kb.press('right')) {
        for (i = _n = 0; _n < 4; i = ++_n) {
          for (y = _o = 0, _ref4 = this.cells.length; 0 <= _ref4 ? _o < _ref4 : _o > _ref4; y = 0 <= _ref4 ? ++_o : --_o) {
            for (x = _p = 0, _ref5 = this.cells[y].length - 1; 0 <= _ref5 ? _p < _ref5 : _p > _ref5; x = 0 <= _ref5 ? ++_p : --_p) {
              if (this.cells[y][x + 1] === 0) {
                this.cells[y][x + 1] = this.cells[y][x];
                this.cells[y][x] = 0;
              } else if (this.cells[y][x + 1] === this.cells[y][x]) {
                this.cells[y][x + 1] *= 2;
                this.cells[y][x] = 0;
              }
            }
          }
        }
        free_cells = [];
        for (y = _q = 0, _ref6 = this.cells.length; 0 <= _ref6 ? _q < _ref6 : _q > _ref6; y = 0 <= _ref6 ? ++_q : --_q) {
          for (x = _r = 0, _ref7 = this.cells[y].length; 0 <= _ref7 ? _r < _ref7 : _r > _ref7; x = 0 <= _ref7 ? ++_r : --_r) {
            if (this.cells[y][x] === 0) {
              free_cells.push({
                x: x,
                y: y
              });
            }
          }
        }
        choice_cell = free_cells[Math.rand(0, free_cells.length - 1)];
        this.cells[choice_cell.y][choice_cell.x] = 2;
      } else if (this.kb.press('up')) {
        for (i = _s = 0; _s < 4; i = ++_s) {
          for (y = _t = 1, _ref8 = this.cells.length; 1 <= _ref8 ? _t < _ref8 : _t > _ref8; y = 1 <= _ref8 ? ++_t : --_t) {
            for (x = _u = 0, _ref9 = this.cells[y].length; 0 <= _ref9 ? _u < _ref9 : _u > _ref9; x = 0 <= _ref9 ? ++_u : --_u) {
              if (this.cells[y - 1][x] === 0) {
                this.cells[y - 1][x] = this.cells[y][x];
                this.cells[y][x] = 0;
              } else if (this.cells[y - 1][x] === this.cells[y][x]) {
                this.cells[y - 1][x] *= 2;
                this.cells[y][x] = 0;
              }
            }
          }
        }
        free_cells = [];
        for (y = _v = 0, _ref10 = this.cells.length; 0 <= _ref10 ? _v < _ref10 : _v > _ref10; y = 0 <= _ref10 ? ++_v : --_v) {
          for (x = _w = 0, _ref11 = this.cells[y].length; 0 <= _ref11 ? _w < _ref11 : _w > _ref11; x = 0 <= _ref11 ? ++_w : --_w) {
            if (this.cells[y][x] === 0) {
              free_cells.push({
                x: x,
                y: y
              });
            }
          }
        }
        choice_cell = free_cells[Math.rand(0, free_cells.length - 1)];
        this.cells[choice_cell.y][choice_cell.x] = 2;
      } else if (this.kb.press('down')) {
        for (i = _x = 0; _x < 4; i = ++_x) {
          for (y = _y = 0, _ref12 = this.cells.length - 1; 0 <= _ref12 ? _y < _ref12 : _y > _ref12; y = 0 <= _ref12 ? ++_y : --_y) {
            for (x = _z = 0, _ref13 = this.cells[y].length; 0 <= _ref13 ? _z < _ref13 : _z > _ref13; x = 0 <= _ref13 ? ++_z : --_z) {
              if (this.cells[y + 1][x] === 0) {
                this.cells[y + 1][x] = this.cells[y][x];
                this.cells[y][x] = 0;
              } else if (this.cells[y + 1][x] === this.cells[y][x]) {
                this.cells[y + 1][x] *= 2;
                this.cells[y][x] = 0;
              }
            }
          }
        }
        free_cells = [];
        for (y = _aa = 0, _ref14 = this.cells.length; 0 <= _ref14 ? _aa < _ref14 : _aa > _ref14; y = 0 <= _ref14 ? ++_aa : --_aa) {
          for (x = _ab = 0, _ref15 = this.cells[y].length; 0 <= _ref15 ? _ab < _ref15 : _ab > _ref15; x = 0 <= _ref15 ? ++_ab : --_ab) {
            if (this.cells[y][x] === 0) {
              free_cells.push({
                x: x,
                y: y
              });
            }
          }
        }
        choice_cell = free_cells[Math.rand(0, free_cells.length - 1)];
        this.cells[choice_cell.y][choice_cell.x] = 2;
      }
      this.draw();
      this.kb.update();
      return requestAnimationFrame(this.update);
    };

    Game.prototype.draw = function() {
      var tx, ty, x, y, _i, _ref, _results;
      this.ctx.clearRect(0, 0, this.width, this.height);
      _results = [];
      for (y = _i = 0, _ref = this.cells.length; 0 <= _ref ? _i < _ref : _i > _ref; y = 0 <= _ref ? ++_i : --_i) {
        _results.push((function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (x = _j = 0, _ref1 = this.cells[y].length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; x = 0 <= _ref1 ? ++_j : --_j) {
            tx = x * this.cell_size + this.cell_size / 2;
            ty = y * this.cell_size + this.cell_size / 2 + 10;
            this.ctx.fillStyle = this.colors[(Math.log(Math.max(1, this.cells[y][x])) / Math.LN2) + 1];
            this.ctx.fillRect(x * this.cell_size, y * this.cell_size, this.cell_size, this.cell_size);
            if (this.cells[y][x] !== 0) {
              this.ctx.fillStyle = rgb(255, 255, 255);
              this.ctx.font = 'normal 30px Arial';
              this.ctx.textAlign = 'center';
              _results1.push(this.ctx.fillText(this.cells[y][x], tx, ty));
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    return Game;

  })();

  new Game();

}).call(this);
