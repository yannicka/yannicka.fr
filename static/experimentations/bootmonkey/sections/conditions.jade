h2#conditions Conditions

h3 Condition if

p La condition <code>if</code> se compose ainsi : <code>if ... { } else if ... { } else { }</code>.

pre.
	if condition {
		# ...
	} else if condition {
		# ...
	} else {
		# ...
	}

p Le <code>if</code> fonctionne comme une expression et peut être assignée à une variable, c'est la dernière expression qui est retournée à la variable. Si aucune des conditions ne correspond, la variable prend la valeur du else s'il y en a un ou garde sa valeur s'il n'y en a pas.

pre.
	Num a = if condition {
		5
	} else if condition {
		0
	} else {
		1
	}

p Le <code>if</code> profite de l'écriture raccourcie suivante :

pre.
	Str a = if condition ? "ok" : "nop"

h3 Opérateurs

pre.
	&lt;, &lt;=, &gt;, &gt;=, ==, &lt;&gt;, and, or, not, in

p Exemple de l'opérateur <code>in</code> qui retourne le nombre d'occurences :

pre.
	List&lt;Str&gt; names = [ "Aymeric", "Guillaume", "Yannick" ]
	Bool has_yannick = "Yannick" in names # 1

	Bool o_in_helloworld = "o" in "Hello World!" # 2

	Dict&lt;Num&gt; scores = { "Aymerick" = 200, "Guillaume" = 180, "Yannick" = 20 }
	Bool has_guillaume = "Guillaume" in scores # 1

h3 Match

p Le <code>match</code> permet de tester plusieurs valeurs d'une variable ou expression.

pre.
	match ma_var {
		"a" {
			# ...
		}

		"b" {
			# ...
		}

		else { # code par défaut, "else" peut être remplacé par "_"
			# ...
		}
	}

p Le <code>match</code> permet de tester des plages de valeurs, des valeurs multiples et des conditions :

pre.
	match ma_var {
		0 .. 5 { # [0;5]
			# ...
		}

		6 ... 10, 50 ... 120 { # [6;10[ ou [50;120[
			# ...
		}

		v if v &gt; 200 { # si ma_var est supérieur à 200
			# ...
		}
	}

p Le <code>match</code> fonctionne comme une expression et peut être assignée à une variable. Si aucune des valeurs n'est possédée par l'expression passée, la variable gardera sa valeur :

pre.
	Str card = "as"

	Num card_value = match card {
		"valet" { 11 }
		"dame"  { 12 }
		"roi"   { 13 }
		"as"    { 14 }
		else    { card.to_num() }
	} # = 14
