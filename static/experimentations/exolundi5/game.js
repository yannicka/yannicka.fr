// Generated by CoffeeScript 1.7.1
var Hunter, Mouse, Person, SIZE, Stopwatch, Timer, Victim, Zombie, btn_play, btn_random, can, create, ctx, draw, get_free_cell, img, in_nb_hunters, in_nb_turns, in_nb_victims, in_nb_zombies, in_speed, init, is_free_cell, keycode, lbl_speed, nbHunters, nbVictims, nbZombies, nb_turns, panel_infos, panel_stats, persons, timer, update,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

CanvasRenderingContext2D.prototype.draw_image_index = function(img, width, height, index, x, y, draw) {
  var basex, basey, nbtiles;
  if (draw == null) {
    draw = true;
  }
  nbtiles = Math.ceil(img.width / width);
  basex = index % nbtiles;
  basex = basex * width;
  basey = Math.floor(index / nbtiles);
  basey = basey * height;
  if (draw) {
    return this.drawImage(img, basex, basey, width, height, x, y, width, height);
  } else {
    return {
      nbtiles: nbtiles,
      basex: basex,
      basey: basey
    };
  }
};

CanvasRenderingContext2D.prototype.get2darray_image = function(img) {
  var a, b, g, i, list_pixels, map, r, x, y, _i, _ref;
  this.save();
  this.drawImage(img, 0, 0);
  list_pixels = this.getImageData(0, 0, img.width, img.height).data;
  map = [];
  for (i = _i = 0, _ref = list_pixels.length; _i < _ref; i = _i += 4) {
    r = list_pixels[i + 0];
    g = list_pixels[i + 1];
    b = list_pixels[i + 2];
    a = list_pixels[i + 3];
    x = Math.floor((i / 4) % img.width);
    y = Math.floor(((i - x) / 4) / img.width);
    if (map[x]) {
      map[x][y] = [r, g, b, a];
    } else {
      map[x] = [[r, g, b, a]];
    }
  }
  this.restore();
  return map;
};

Math.clamp = function(min, val, max) {
  return Math.max(min, Math.min(max, val));
};

Math.rand = function(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
};

window.rgb = function(r, g, b, a) {
  if (a == null) {
    a = 1;
  }
  if (a === 1) {
    return "rgb(" + r + ", " + g + ", " + b + ")";
  } else {
    return "rgb(" + r + ", " + g + ", " + b + ", " + a + ")";
  }
};

Array.prototype.has = function(val) {
  var v, _i, _len;
  for (_i = 0, _len = this.length; _i < _len; _i++) {
    v = this[_i];
    if (v.join(',') === val.join(',')) {
      return true;
    }
  }
  return false;
};

window.preload_images = function(images, callback) {
  var i, image_loaded, nb_images_loaded, nb_images_to_load, new_image_loaded, preload;
  nb_images_loaded = 0;
  nb_images_to_load = Object.keys(images).length;
  image_loaded = [];
  new_image_loaded = function() {
    nb_images_loaded++;
  };
  for (i in images) {
    image_loaded[i] = new Image();
    image_loaded[i].onload = new_image_loaded;
    image_loaded[i].src = images[i];
  }
  preload = function() {
    if (nb_images_loaded === nb_images_to_load) {
      callback();
    } else {
      setTimeout(preload, 100);
    }
  };
  preload();
  return image_loaded;
};

Timer = (function() {
  function Timer() {
    this.timer = null;
  }

  Timer.prototype.setTimer = function(timer) {
    return this.timer = timer;
  };

  Timer.prototype.update = function() {};

  return Timer;

})();

Stopwatch = (function() {
  function Stopwatch() {
    this.dt = 0;
    this.last = Date.now();
    this.time = 0;
  }

  Stopwatch.prototype.update = function() {
    this.dt = Date.now() - this.last;
    this.last = Date.now();
    return this.time += this.dt;
  };

  return Stopwatch;

})();

Mouse = (function() {
  function Mouse(el) {
    this.onmousemove = __bind(this.onmousemove, this);
    this.onmousedown = __bind(this.onmousedown, this);
    this.onmouseup = __bind(this.onmouseup, this);
    this.x = 0;
    this.y = 0;
    this.click = null;
    this.mtime = 0;
    this.el = el;
    this.loose = null;
    document.addEventListener('mousedown', this.onmousedown, false);
    document.addEventListener('mousemove', this.onmousemove, false);
    document.addEventListener('mouseup', this.onmouseup, false);
  }

  Mouse.prototype.update = function() {
    return this.mtime++;
  };

  Mouse.prototype.onmouseup = function(e) {
    this.loose = this.mtime;
    return this.click = null;
  };

  Mouse.prototype.onmousedown = function(e) {
    this.onmousemove(e);
    return this.click = this.mtime;
  };

  Mouse.prototype.onmousemove = function(e) {
    this.x = e.pageX - (this.el != null ? this.el.offsetLeft : 0);
    return this.y = e.pageY - (this.el != null ? this.el.offsetTop : 0);
  };

  Mouse.prototype.up = function() {
    return this.click === null;
  };

  Mouse.prototype.down = function() {
    return this.click !== null;
  };

  Mouse.prototype.press = function() {
    return this.click === this.mtime;
  };

  Mouse.prototype.release = function() {
    return this.loose === this.mtime;
  };

  return Mouse;

})();

keycode = {
  TAB: 9,
  ENTER: 13,
  SHIFT: 16,
  CTRL: 17,
  ALT: 18,
  ESC: 27,
  SPACE: 32,
  LEFT: 37,
  UP: 38,
  RIGHT: 39,
  DOWN: 40,
  A: 65,
  B: 66,
  C: 67,
  D: 68,
  E: 69,
  F: 70,
  G: 71,
  H: 72,
  I: 73,
  J: 74,
  K: 75,
  L: 76,
  M: 77,
  N: 78,
  O: 79,
  P: 80,
  Q: 81,
  R: 82,
  S: 83,
  T: 84,
  U: 85,
  V: 86,
  W: 87,
  X: 88,
  Y: 89,
  Z: 90,
  NUM0: 48,
  NUM1: 49,
  NUM2: 50,
  NUM3: 51,
  NUM4: 52,
  NUM5: 53,
  NUM6: 54,
  NUM7: 55,
  NUM8: 56,
  NUM9: 57,
  NUMPAD0: 96,
  NUMPAD1: 97,
  NUMPAD2: 98,
  NUMPAD3: 99,
  NUMPAD4: 100,
  NUMPAD5: 101,
  NUMPAD6: 102,
  NUMPAD7: 103,
  NUMPAD8: 104,
  NUMPAD9: 105,
  ADD: 107,
  SUB: 109,
  MUL: 106,
  DIV: 111,
  CAPSLOCK: 20,
  PAGEUP: 33,
  PAGEDOWN: 34,
  END: 35,
  HOME: 36,
  ISERT: 45,
  DELETE: 46,
  NUMLOCK: 144
};

SIZE = 20;

panel_stats = document.getElementById('panel_stats');

panel_infos = document.getElementById('panel_infos');

btn_play = document.getElementById('btn_play');

btn_random = document.getElementById('btn_random');

in_speed = document.getElementById('in_speed');

lbl_speed = document.getElementById('lbl_speed');

in_nb_zombies = document.getElementById('in_nb_zombies');

in_nb_victims = document.getElementById('in_nb_victims');

in_nb_hunters = document.getElementById('in_nb_hunters');

in_nb_turns = document.getElementById('in_nb_turns');

Person = (function() {
  function Person(x, y) {
    this.x = x;
    this.y = y;
    this.color = rgb(255, 255, 255);
  }

  Person.prototype.draw = function(ctx) {};

  Person.prototype.move = function() {};

  Person.prototype.move_cross = function() {
    switch (Math.rand(0, 3)) {
      case 0:
        return this.go_right();
      case 1:
        return this.go_left();
      case 2:
        return this.go_down();
      case 3:
        return this.go_up();
    }
  };

  Person.prototype.move_diagonal = function() {
    switch (Math.rand(0, 7)) {
      case 0:
        return this.go_right();
      case 1:
        return this.go_left();
      case 2:
        return this.go_down();
      case 3:
        return this.go_up();
      case 4:
        this.go_right();
        return this.go_down();
      case 5:
        this.go_left();
        return this.go_up();
      case 6:
        this.go_right();
        return this.go_up();
      case 7:
        this.go_left();
        return this.go_down();
    }
  };

  Person.prototype.go_up = function() {
    var new_y;
    if (this.y > 0) {
      new_y = this.y - 1;
    } else {
      new_y = this.y + 1;
    }
    if (is_free_cell(this.x, new_y)) {
      return this.y = new_y;
    }
  };

  Person.prototype.go_down = function() {
    var new_y;
    if (this.y < SIZE - 1) {
      new_y = this.y + 1;
    } else {
      new_y = this.y - 1;
    }
    if (is_free_cell(this.x, new_y)) {
      return this.y = new_y;
    }
  };

  Person.prototype.go_left = function() {
    var new_x;
    if (this.x > 0) {
      new_x = this.x - 1;
    } else {
      new_x = this.x + 1;
    }
    if (is_free_cell(new_x, this.y)) {
      return this.x = new_x;
    }
  };

  Person.prototype.go_right = function() {
    var new_x;
    if (this.x < SIZE - 1) {
      new_x = this.x + 1;
    } else {
      new_x = this.x - 1;
    }
    if (is_free_cell(new_x, this.y)) {
      return this.x = new_x;
    }
  };

  return Person;

})();

Zombie = (function(_super) {
  __extends(Zombie, _super);

  function Zombie(x, y) {
    Zombie.__super__.constructor.call(this, x, y);
  }

  Zombie.prototype.draw = function(ctx) {
    return ctx.drawImage(img.persons, 0, 0, SIZE, SIZE, this.x * SIZE, this.y * SIZE, SIZE, SIZE);
  };

  Zombie.prototype.move = function() {
    return this.move_cross();
  };

  Zombie.prototype.bite = function() {
    var human, humans, pos, _i, _j, _len, _len1, _results;
    humans = [];
    pos = [[this.x, this.y - 1], [this.x + 1, this.y], [this.x, this.y + 1], [this.x - 1, this.y]];
    for (_i = 0, _len = persons.length; _i < _len; _i++) {
      human = persons[_i];
      if (human instanceof Hunter || human instanceof Victim) {
        if (pos.has([human.x, human.y])) {
          humans.push(human);
        }
      }
    }
    _results = [];
    for (_j = 0, _len1 = humans.length; _j < _len1; _j++) {
      human = humans[_j];
      persons.push(new Zombie(human.x, human.y));
      _results.push(persons.splice(persons.indexOf(human), 1));
    }
    return _results;
  };

  return Zombie;

})(Person);

Victim = (function(_super) {
  __extends(Victim, _super);

  function Victim(x, y) {
    Victim.__super__.constructor.call(this, x, y);
  }

  Victim.prototype.draw = function(ctx) {
    return ctx.drawImage(img.persons, 40, 0, SIZE, SIZE, this.x * SIZE, this.y * SIZE, SIZE, SIZE);
  };

  Victim.prototype.move = function() {
    var have_zombies, pos, zombie, zombies, _i, _len;
    zombies = [];
    pos = [[this.x, this.y - 1], [this.x + 1, this.y], [this.x, this.y + 1], [this.x - 1, this.y]];
    have_zombies = false;
    for (_i = 0, _len = persons.length; _i < _len; _i++) {
      zombie = persons[_i];
      if (zombie instanceof Zombie) {
        if (pos.has([zombie.x, zombie.y])) {
          have_zombies = true;
          break;
        }
      }
    }
    if (have_zombies) {
      return this.move_cross();
    }
  };

  return Victim;

})(Person);

Hunter = (function(_super) {
  __extends(Hunter, _super);

  function Hunter(x, y) {
    Hunter.__super__.constructor.call(this, x, y);
  }

  Hunter.prototype.draw = function(ctx) {
    return ctx.drawImage(img.persons, 20, 0, SIZE, SIZE, this.x * SIZE, this.y * SIZE, SIZE, SIZE);
  };

  Hunter.prototype.move = function() {
    return this.move_diagonal();
  };

  Hunter.prototype.hunt = function() {
    var i, pos, zombie, zombies, _i, _j, _len, _len1, _results;
    zombies = [];
    pos = [[this.x, this.y], [this.x, this.y - 1], [this.x + 1, this.y], [this.x, this.y + 1], [this.x - 1, this.y]];
    for (_i = 0, _len = persons.length; _i < _len; _i++) {
      zombie = persons[_i];
      if (zombie instanceof Zombie) {
        if (pos.has([zombie.x, zombie.y])) {
          zombies.push(zombie);
        }
      }
    }
    i = 0;
    _results = [];
    for (_j = 0, _len1 = zombies.length; _j < _len1; _j++) {
      zombie = zombies[_j];
      if (i++ < 1) {
        _results.push(persons.splice(persons.indexOf(zombie), 1));
      }
    }
    return _results;
  };

  return Hunter;

})(Person);

nbZombies = 0;

nbVictims = 0;

nbHunters = 0;

can = document.getElementById('game');

ctx = can.getContext('2d');

can.width = 400;

can.height = 400;

persons = nb_turns = timer = img = null;

if (nbZombies + nbVictims + nbHunters > 20 * 20) {
  alert('STOP!');
}

init = function() {
  var i, x, y, _i, _j, _k, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
  persons = [];
  for (i = _i = 0, _ref = in_nb_zombies.value; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
    _ref1 = get_free_cell(), x = _ref1[0], y = _ref1[1];
    persons.push(new Zombie(x, y));
  }
  for (i = _j = 0, _ref2 = in_nb_victims.value; 0 <= _ref2 ? _j < _ref2 : _j > _ref2; i = 0 <= _ref2 ? ++_j : --_j) {
    _ref3 = get_free_cell(), x = _ref3[0], y = _ref3[1];
    persons.push(new Victim(x, y));
  }
  for (i = _k = 0, _ref4 = in_nb_hunters.value; 0 <= _ref4 ? _k < _ref4 : _k > _ref4; i = 0 <= _ref4 ? ++_k : --_k) {
    _ref5 = get_free_cell(), x = _ref5[0], y = _ref5[1];
    persons.push(new Hunter(x, y));
  }
  nb_turns = 0;
  return img = preload_images({
    persons: 'persons.png'
  }, create);
};

create = function() {
  return timer = setInterval(update, in_speed.value);
};

update = function() {
  var hunter, nb_hunters, nb_victims, nb_zombies, victim, zombie, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m;
  for (_i = 0, _len = persons.length; _i < _len; _i++) {
    victim = persons[_i];
    if (victim instanceof Victim) {
      victim.move();
    }
  }
  for (_j = 0, _len1 = persons.length; _j < _len1; _j++) {
    hunter = persons[_j];
    if (hunter instanceof Hunter) {
      hunter.move();
    }
  }
  for (_k = 0, _len2 = persons.length; _k < _len2; _k++) {
    zombie = persons[_k];
    if (zombie instanceof Zombie) {
      zombie.move();
    }
  }
  for (_l = 0, _len3 = persons.length; _l < _len3; _l++) {
    hunter = persons[_l];
    if (hunter instanceof Hunter) {
      hunter.hunt();
    }
  }
  for (_m = 0, _len4 = persons.length; _m < _len4; _m++) {
    zombie = persons[_m];
    if (zombie instanceof Zombie) {
      zombie.bite();
    }
  }
  nb_hunters = (persons.filter(function(person) {
    return person instanceof Hunter;
  })).length;
  nb_victims = (persons.filter(function(person) {
    return person instanceof Victim;
  })).length;
  nb_zombies = (persons.filter(function(person) {
    return person instanceof Zombie;
  })).length;
  panel_stats.innerHTML = "Nb. chasseurs : " + nb_hunters + "<br />\nNb. victimes : " + nb_victims + "<br />\nNb. zombies : " + nb_zombies + "<br />\nNb. tours : " + nb_turns;
  nb_turns++;
  if (nb_turns > in_nb_turns.value) {
    clearInterval(timer);
  }
  return draw();
};

draw = function() {
  var person, _i, _len;
  ctx.fillStyle = rgb(0, 0, 0);
  ctx.fillRect(0, 0, can.width, can.height);
  for (_i = 0, _len = persons.length; _i < _len; _i++) {
    person = persons[_i];
    person.draw(ctx);
  }
};

is_free_cell = function(x, y) {
  var person, _i, _len;
  for (_i = 0, _len = persons.length; _i < _len; _i++) {
    person = persons[_i];
    if (x === person.x && y === person.y) {
      return false;
    }
  }
  return true;
};

get_free_cell = function() {
  var x, y;
  while (true) {
    x = Math.rand(0, 19);
    y = Math.rand(0, 19);
    if (is_free_cell(x, y)) {
      break;
    }
  }
  return [x, y];
};

btn_play.addEventListener('click', function() {
  init();
  return panel_infos.style.display = 'none';
});

btn_random.addEventListener('click', function() {
  in_nb_zombies.value = Math.rand(0, 130);
  in_nb_victims.value = Math.rand(0, 170);
  in_nb_hunters.value = Math.rand(0, 100);
  init();
  return panel_infos.style.display = 'none';
});

in_speed.addEventListener('mousemove', function() {
  return lbl_speed.innerHTML = 'Vitesse de jeu : ' + in_speed.value;
});
