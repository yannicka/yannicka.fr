// Generated by CoffeeScript 1.7.1
var Cell, Game, Grid, Mouse, PI_2, Particle, ParticleSystem, Stopwatch, clone_arr, get_offset, hsl, hsla, rand_arr, rgb, rgba,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Math.rand = function(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
};

rgb = function(r, g, b) {
  return "rgb(" + r + ", " + g + ", " + b + ")";
};

rgba = function(r, g, b, a) {
  return "rgba(" + r + ", " + g + ", " + b + ", " + a + ")";
};

hsl = function(h, s, l) {
  return "hsl(" + h + ", " + s + "%, " + l + "%)";
};

hsla = function(h, s, l, a) {
  return "hsla(" + h + ", " + s + "%, " + l + "%, " + a + ")";
};

clone_arr = function(arr) {
  return arr.slice(0);
};

rand_arr = function(arr) {
  return arr[Math.floor(Math.random() * arr.length)];
};

PI_2 = 2 * Math.PI;

if (!window.requestAnimationFrame) {
  window.requestAnimationFrame = (function() {
    return window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback, element) {
      return window.setTimeout(callback, 1000 / 60);
    };
  })();
}

get_offset = function(el) {
  var x, y;
  x = 0;
  y = 0;
  while (el && !isNaN(el.offsetLeft) && !isNaN(el.offsetTop)) {
    x += el.offsetLeft - el.scrollLeft;
    y += el.offsetTop - el.scrollTop;
    el = el.offsetParent;
  }
  return {
    top: y,
    left: x
  };
};

Mouse = (function() {
  function Mouse(el) {
    this.on_mouse_move = __bind(this.on_mouse_move, this);
    this.on_mouse_down = __bind(this.on_mouse_down, this);
    this.on_mouse_up = __bind(this.on_mouse_up, this);
    this.x = 0;
    this.y = 0;
    this.click = null;
    this.mtime = 0;
    this.el = el;
    this.loose = null;
    this.target = null;
    document.addEventListener('mousedown', this.on_mouse_down, false);
    document.addEventListener('mousemove', this.on_mouse_move, false);
    document.addEventListener('mouseup', this.on_mouse_up, false);
    document.addEventListener('touchstart', this.on_mouse_down, false);
    document.addEventListener('touchmove', this.on_mouse_move, false);
    document.addEventListener('touchend', this.on_mouse_up, false);
  }

  Mouse.prototype.update = function() {
    this.mtime++;
  };

  Mouse.prototype.on_mouse_up = function(e) {
    this.loose = this.mtime;
    this.click = null;
    this.target = e.target;
  };

  Mouse.prototype.on_mouse_down = function(e) {
    this.on_mouse_move(e);
    this.click = this.mtime;
    this.target = e.target;
  };

  Mouse.prototype.on_mouse_move = function(e) {
    var position_el;
    if (e.changedTouches) {
      e = e.changedTouches[0];
      if (e == null) {
        return;
      }
    }
    if (this.el && isNaN(this.el.offsetLeft + this.el.scrollLeft + this.el.offsetTop + this.el.scrollTop + e.pageX + e.pageY)) {
      return;
    }
    position_el = get_offset(this.el);
    this.x = e.pageX - (this.el != null ? position_el.left : 0);
    this.y = e.pageY - (this.el != null ? position_el.top : 0);
    this.target = e.target;
  };

  Mouse.prototype.press = function() {
    return this.click === this.mtime;
  };

  return Mouse;

})();

Stopwatch = (function() {
  function Stopwatch() {
    this.dt = 0;
    this.last = Date.now();
    this.time = 0;
  }

  Stopwatch.prototype.update = function() {
    var now;
    now = Date.now();
    this.dt = now - this.last;
    this.last = now;
    this.time += this.dt;
  };

  return Stopwatch;

})();

Cell = (function() {
  function Cell(active) {
    this.active = active;
  }

  Cell.prototype.draw = function(ctx) {
    if (this.active) {
      ctx.drawImage(Grid.img_active, this.x, this.y);
    } else {
      ctx.drawImage(Grid.img_inactive, this.x, this.y);
    }
  };

  Cell.prototype.move = function(x, y) {
    this.x = x;
    this.y = y;
  };

  return Cell;

})();

Grid = (function() {
  Grid.img_active = null;

  Grid.img_inactive = null;

  function Grid(nb_columns, nb_rows, nb_clicks, cells, color) {
    this.nb_columns = nb_columns;
    this.nb_rows = nb_rows;
    this.nb_cells = this.nb_columns * this.nb_rows;
    this.nb_clicks_gold = nb_clicks;
    this.nb_clicks_silver = Math.ceil(nb_clicks * 1.5);
    this.nb_clicks_bronze = nb_clicks * 2;
    this.nb_clicks_empty = nb_clicks * 3;
    this.user_clicks = 0;
    this.cell_spacing = 2;
    this.cell_size = 50;
    this.cell_size_spacing = this.cell_size + this.cell_spacing;
    this.cell_color = color;
    this.actions = [];
    this.orig_grid = clone_arr(cells);
    this.gen_grid();
  }

  Grid.prototype.gen_grid = function() {
    var active, i;
    this.actions = [];
    this.user_clicks = 0;
    this.cells = [];
    i = this.orig_grid.length;
    while (i--) {
      active = this.orig_grid[i];
      this.cells.push(new Cell(active));
    }
  };

  Grid.prototype.regen_grid = function() {
    var cell, tab, _i, _len, _ref;
    this.actions = [];
    this.user_clicks = 0;
    tab = [];
    _ref = this.cells;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      cell = _ref[_i];
      tab.push(cell.active);
    }
    this.orig_grid = clone_arr(tab.reverse());
    this.gen_grid();
  };

  Grid.prototype.draw = function(ctx) {
    var cell, _i, _len, _ref;
    _ref = this.cells;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      cell = _ref[_i];
      cell.draw(ctx);
    }
  };

  Grid.prototype.resize = function(width, height) {
    var cell, game_width, i, x, y;
    this.cell_size = (height - this.cell_spacing * (this.nb_rows - 1)) / this.nb_rows;
    game_width = this.cell_size * this.nb_columns + (this.cell_spacing * (this.nb_rows - 1));
    if (game_width > width) {
      this.cell_size = (width - this.cell_spacing * (this.nb_columns - 1)) / this.nb_columns;
    }
    this.cell_size_spacing = this.cell_size + this.cell_spacing;
    this.gen_img();
    i = this.cells.length;
    while (i--) {
      cell = this.cells[i];
      x = (this.cells.length - i - 1) % this.nb_columns * this.cell_size_spacing;
      y = Math.floor((this.cells.length - i - 1) / this.nb_columns) * this.cell_size_spacing;
      cell.move(x, y);
    }
    return this.get_game_size();
  };

  Grid.prototype.get_game_size = function() {
    return {
      width: this.cell_size_spacing * this.nb_columns,
      height: this.cell_size_spacing * this.nb_rows
    };
  };

  Grid.prototype.gen_img = function() {
    Grid.img_active = this.gen_img_cell(this.cell_color);
    Grid.img_inactive = this.gen_img_cell(rgb(220, 220, 220));
  };

  Grid.prototype.gen_img_cell = function(color) {
    var cell, ctx, size;
    size = this.cell_size;
    cell = document.createElement('canvas');
    ctx = cell.getContext('2d');
    cell.width = size;
    cell.height = size;
    ctx.fillStyle = color;
    ctx.fillRect(0, 0, size, size);
    ctx.fillStyle = rgba(0, 0, 0, .05);
    ctx.beginPath();
    ctx.moveTo(0, 0);
    ctx.lineTo(size, 0);
    ctx.lineTo(size, size);
    ctx.lineTo(size * 0.8, size * 0.2);
    ctx.closePath();
    ctx.fill();
    return cell;
  };

  Grid.prototype.pushed = function(x, y, press) {
    var cell, i;
    i = this.cells.length;
    while (i--) {
      cell = this.cells[i];
      if (x > cell.x && x <= cell.x + this.cell_size && y > cell.y && y <= cell.y + this.cell_size) {
        if (press) {
          this.cell_click(i, this.nb_columns);
          return true;
        }
      }
    }
    return false;
  };

  Grid.prototype.cell_click = function(i) {
    var j, neighbor, neighbors, _i, _len;
    this.actions.push(i);
    this.user_clicks++;
    neighbors = [i - this.nb_columns, i, i + this.nb_columns];
    if (i % this.nb_columns !== 0) {
      neighbors.push(i - 1);
    }
    if (i % this.nb_columns !== this.nb_columns - 1) {
      neighbors.push(i + 1);
    }
    j = neighbors.length;
    while (j--) {
      neighbor = neighbors[j];
      if (neighbor < 0 || neighbor >= this.cells.length) {
        neighbors.splice(j, 1);
      }
    }
    for (_i = 0, _len = neighbors.length; _i < _len; _i++) {
      neighbor = neighbors[_i];
      this.cells[neighbor].active = 1 - this.cells[neighbor].active;
    }
  };

  Grid.prototype.cancel_last_action = function() {
    var last_action;
    last_action = this.actions.pop();
    this.cell_click(last_action);
    return this.actions.pop();
  };

  Grid.prototype.random_click = function(nb_clicks) {
    var _i;
    if (nb_clicks == null) {
      nb_clicks = 1;
    }
    for (_i = 0; 0 <= nb_clicks ? _i < nb_clicks : _i > nb_clicks; 0 <= nb_clicks ? _i++ : _i--) {
      this.cell_click(Math.rand(0, this.nb_cells - 1));
    }
  };

  Grid.prototype.is_empty = function() {
    var cell, finished, _i, _len, _ref;
    finished = true;
    _ref = this.cells;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      cell = _ref[_i];
      if (cell.active === 1) {
        finished = false;
        break;
      }
    }
    return finished;
  };

  Grid.prototype.get_medal = function() {
    switch (false) {
      case !(this.user_clicks <= this.nb_clicks_gold):
        return 3;
      case !(this.user_clicks <= this.nb_clicks_silver):
        return 2;
      case !(this.user_clicks <= this.nb_clicks_bronze):
        return 1;
      default:
        return 0;
    }
  };

  return Grid;

})();

ParticleSystem = (function() {
  function ParticleSystem() {
    this.particles = [];
  }

  ParticleSystem.prototype.add_particles = function(nb, pos) {
    var i, _i;
    for (i = _i = 0; _i < nb; i = _i += 1) {
      this.particles.push(new Particle(pos.x, pos.y, Math.rand(-2, 2), Math.rand(5, 10)));
    }
  };

  ParticleSystem.prototype.clear = function() {
    return this.particles = [];
  };

  ParticleSystem.prototype.update = function() {
    var i, particle;
    i = this.particles.length;
    while (i--) {
      particle = this.particles[i];
      particle.update();
      if (particle.life >= particle.max_life) {
        this.particles.splice(i, 1);
      }
    }
  };

  ParticleSystem.prototype.draw = function(ctx) {
    var particle, _i, _len, _ref;
    ctx.fillStyle = rgb(255, 255, 255);
    _ref = this.particles;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      particle = _ref[_i];
      particle.draw(ctx);
    }
  };

  return ParticleSystem;

})();

Particle = (function() {
  function Particle(x, y, dx, dy) {
    this.x = x;
    this.y = y;
    this.dx = dx;
    this.dy = dy;
    this.life = 0;
    this.max_life = Math.rand(10, 20);
    this.size = this.max_life;
  }

  Particle.prototype.update = function() {
    this.x += this.dx;
    this.y += this.dy;
    this.life++;
    this.size--;
  };

  Particle.prototype.draw = function(ctx) {
    ctx.beginPath();
    ctx.arc(this.x, this.y, this.size / 2, 0, PI_2, false);
    ctx.fill();
  };

  return Particle;

})();

Game = (function() {
  function Game(lvl) {
    if (lvl == null) {
      lvl = 0;
    }
    this.resize = __bind(this.resize, this);
    this.update = __bind(this.update, this);
    this.on_back_button = __bind(this.on_back_button, this);
    this.on_menu_button = __bind(this.on_menu_button, this);
    if (localStorage.getItem('cur_level') == null) {
      localStorage.setItem('cur_level', 0);
    }
    this.can = document.getElementById('game');
    this.ctx = this.can.getContext('2d');
    this.shake = 0;
    this.particles = new ParticleSystem();
    this.mouse = new Mouse(this.can);
    this.timer = new Stopwatch();
    this.win_message = null;
    this.grid = null;
    this.orig_grid = null;
    this.can_click = true;
    this.can_click_timer = 120;
    this.can_click_time = 0;
    this.btn_cancel = document.getElementById('btn_cancel');
    this.btn_skip = document.getElementById('btn_skip');
    this.btn_regenerate = document.getElementById('btn_regenerate');
    if (lvl <= -1) {
      this.btn_skip.style.display = 'none';
    } else {
      this.btn_regenerate.style.display = 'none';
    }
    this.btn_cancel.style.display = 'none';
    document.addEventListener('menubutton', this.on_menu_button, false);
    new Finger().add_event('tap', (function(_this) {
      return function(e) {
        var cur_level, go_level, target_id;
        cur_level = parseInt(localStorage.getItem('cur_level'));
        go_level = parseInt(localStorage.getItem('go_level'));
        target_id = e.target.id !== '' ? e.target.id : e.target.parentNode.id;
        switch (target_id) {
          case 'btn_menu':
            return _this.on_menu_button();
          case 'btn_cancel':
            _this.grid.cancel_last_action();
            _this.display_menu(false);
            if (_this.grid.actions.length === 0) {
              return _this.btn_cancel.style.display = 'none';
            }
            break;
          case 'btn_skip':
            if (go_level < cur_level) {
              _this.display_menu(false);
              return _this.change_level(go_level + 1);
            }
            break;
          case 'btn_restart':
            _this.display_menu(false);
            _this.change_level(go_level);
            if (_this.grid.actions.length === 0) {
              return _this.btn_cancel.style.display = 'none';
            }
            break;
          case 'btn_regenerate':
            _this.display_menu(false);
            _this.grid = null;
            _this.change_level(go_level);
            if (_this.grid.actions.length === 0) {
              return _this.btn_cancel.style.display = 'none';
            }
            break;
          case 'btn_back':
            return location.href = 'select_level.html';
          default:
            return _this.display_menu(false);
        }
      };
    })(this));
    this.load_grids((function(_this) {
      return function(grids) {
        _this.grids = grids;
        return _this.create(lvl);
      };
    })(this));
  }

  Game.prototype.on_menu_button = function(e) {
    var style_menu;
    style_menu = document.getElementById('game-menu').style;
    if (style_menu.display === 'block') {
      this.display_menu(false);
    } else {
      this.display_menu(true);
    }
    if (e && e.preventDefault) {
      e.preventDefault();
    }
    return false;
  };

  Game.prototype.on_back_button = function(e) {
    var style_menu;
    style_menu = document.getElementById('game-menu').style;
    if (style_menu.display === 'block') {
      this.display_menu(false);
      if (e && e.preventDefault) {
        e.preventDefault();
      }
    } else {
      location.href = 'select_level.html';
    }
    return false;
  };

  Game.prototype.display_menu = function(display) {
    var style_menu;
    style_menu = document.getElementById('game-menu').style;
    return style_menu.display = display ? 'block' : 'none';
  };

  Game.prototype.load_grids = function(callback) {
    load_file('data/level.csv', function(response) {
      var cells, color, format, i, j, level, levels, nb_clicks, nb_columns, nb_rows, _i, _len, _ref;
      levels = [];
      j = 0;
      _ref = parse_csv(response);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        level = _ref[_i];
        format = level[0].split('x');
        nb_clicks = parseInt(level[1]);
        cells = level[2].split('');
        nb_columns = parseInt(format[0]);
        nb_rows = parseInt(format[1]);
        i = cells.length;
        while (i--) {
          cells[i] = parseInt(cells[i]);
        }
        Rand.seed = j * 4;
        color = Rand.gen(0, 360);
        levels.push(new Grid(nb_columns, nb_rows, nb_clicks, cells, hsl(color, 100, 38)));
        j++;
      }
      callback(levels);
    });
  };

  Game.prototype.create = function(lvl) {
    if (lvl == null) {
      lvl = 0;
    }
    window.addEventListener('resize', this.resize);
    this.change_level(lvl);
    this.update();
  };

  Game.prototype.update = function() {
    if (this.win_message) {
      this.win_message.life -= this.timer.dt;
      if (this.win_message.life <= 0) {
        this.win_message = null;
      }
    }
    this.can_click_time += this.timer.dt;
    if (!this.can_click && this.can_click_time > this.can_click_timer) {
      this.can_click = true;
      this.can_click_time = 0;
    }
    if (this.can_click && this.mouse.target === this.can && this.grid.pushed(this.mouse.x, this.mouse.y, this.mouse.press())) {
      this.btn_cancel.style.display = 'block';
      this.display_menu(false);
      this.shake = 8;
      this.can_click = false;
      this.particles.add_particles(10, this.mouse);
      if (this.grid.is_empty()) {
        this.launch_win();
      }
    }
    this.shake *= -0.8;
    this.timer.update();
    this.particles.update();
    if (this.shake > -0.01 && this.shake < 0.01) {
      this.shake = 0;
    }
    this.mouse.update();
    this.draw();
    requestAnimationFrame(this.update);
  };

  Game.prototype.draw = function() {
    var go_level, _ref;
    this.ctx.clearRect(0, 0, this.can.width, this.can.height);
    if (this.shake !== 0) {
      this.ctx.save();
      this.ctx.translate(this.shake, this.shake);
    }
    this.grid.draw(this.ctx);
    this.particles.draw(this.ctx);
    if (this.shake !== 0) {
      this.ctx.restore();
    }
    if (this.win_message) {
      this.ctx.save();
      if (this.win_message.life < 500) {
        this.ctx.globalAlpha = this.win_message.life / 500;
      }
      go_level = parseInt(localStorage.getItem('go_level'));
      if ((1 <= (_ref = this.win_message.medal) && _ref <= 3) && go_level >= 0) {
        this.ctx.save();
        this.ctx.translate(this.can.width / 2, 38);
        this.ctx.scale(Math.sin(this.win_message.life / 200), 1);
        this.ctx.fillStyle = (function() {
          switch (this.win_message.medal) {
            case 1:
              return rgb(190, 99, 42);
            case 2:
              return rgb(198, 198, 198);
            case 3:
              return rgb(255, 212, 0);
          }
        }).call(this);
        this.ctx.strokeStyle = rgba(0, 0, 0, .2);
        this.ctx.lineWidth = 2;
        this.ctx.beginPath();
        this.ctx.arc(0, 0, 50 / 2, 0, 2 * Math.PI, false);
        this.ctx.fill();
        this.ctx.stroke();
        this.ctx.fillStyle = rgba(0, 0, 0, .1);
        this.ctx.restore();
      } else if (go_level < 0) {
        this.ctx.textAlign = 'center';
        this.ctx.font = 'normal 42px Arial';
        this.ctx.fillStyle = rgba(255, 255, 255, this.win_message.life / 1000);
        this.ctx.fillText(this.win_message.text, this.can.width / 2, 50);
        this.ctx.strokeStyle = rgba(0, 0, 0, this.win_message.life / 1000);
        this.ctx.lineWidth = 1;
        this.ctx.strokeText(this.win_message.text, this.can.width / 2, 50);
      }
      this.ctx.textAlign = 'center';
      this.ctx.font = 'normal 42px Roboto, sans-serif';
      this.ctx.fillStyle = rgb(255, 255, 255);
      this.ctx.strokeStyle = rgb(0, 0, 0);
      this.ctx.lineWidth = 1;
      this.ctx.restore();
    }
  };

  Game.prototype.launch_win = function() {
    var go_level, medal, medals, texts_victory;
    this.btn_cancel.style.display = 'none';
    texts_victory = ['Gagné !', 'Victoire !', 'Bien joué !', 'Bravo !', 'Félicitations !'];
    medal = this.grid.get_medal();
    this.win_message = {
      text: rand_arr(texts_victory),
      life: 1000,
      medal: medal
    };
    this.particles.clear();
    this.grid = null;
    go_level = parseInt(localStorage.getItem('go_level'));
    if (go_level <= -1) {
      return this.change_level(go_level);
    } else {
      medals = JSON.parse(localStorage.getItem('medals'));
      if (!medals[go_level] || (medals[go_level] && medal > medals[go_level])) {
        medals[go_level] = medal;
        localStorage.setItem('medals', JSON.stringify(medals));
      }
      return this.change_level(go_level + 1);
    }
  };

  Game.prototype.resize = function() {
    var game_size, screen_height, screen_width;
    screen_width = window.innerWidth - 12;
    screen_height = window.innerHeight - 48 - 12;
    game_size = this.grid.resize(screen_width, screen_height);
    this.resize_canvas(game_size.width, game_size.height);
    this.can.style.top = "" + (screen_height / 2 - this.can.height / 2) + "px";
  };

  Game.prototype.resize_canvas = function(width, height) {
    this.can.width = width;
    this.can.height = height;
  };

  Game.prototype.change_level = function(level) {
    var cells, color, difficulty_level, i, info_level, nb_clicks, nb_columns, nb_rows, _ref;
    if (parseInt(localStorage.getItem('cur_level')) < level) {
      localStorage.setItem('cur_level', level);
    }
    localStorage.setItem('go_level', level);
    info_level = document.getElementById('info_level');
    if (level >= 0) {
      info_level.innerHTML = "Niveau " + (level + 1) + " / " + this.grids.length;
      this.grid = this.grids[level];
      this.grid.gen_grid();
      if (parseInt(localStorage.getItem('cur_level')) < level + 1) {
        this.btn_skip.style.display = 'none';
      } else {
        this.btn_skip.style.display = 'inline-block';
      }
    } else if (this.grid === null && level < 0) {
      difficulty_level = (function() {
        switch (level) {
          case -1:
            return 'd&eacute;butant';
          case -2:
            return 'facile';
          case -3:
            return 'moyen';
          case -4:
            return 'difficile';
          case -5:
            return 'expert';
          default:
            return 'inconnu';
        }
      })();
      info_level.innerHTML = "Niveau " + difficulty_level;
      _ref = (function() {
        switch (level) {
          case -1:
            return [Math.rand(2, 4), Math.rand(2, 4)];
          case -2:
            return [Math.rand(3, 4), Math.rand(3, 4)];
          case -3:
            return [Math.rand(3, 5), Math.rand(3, 5)];
          case -4:
            return [Math.rand(4, 5), Math.rand(4, 5)];
          case -5:
            return [Math.rand(5, 6), Math.rand(5, 6)];
          default:
            return [Math.rand(5, 6), Math.rand(5, 6)];
        }
      })(), nb_columns = _ref[0], nb_rows = _ref[1];
      Rand.seed = Math.rand(0, 360);
      cells = (function() {
        var _i, _ref1, _results;
        _results = [];
        for (i = _i = 0, _ref1 = nb_columns * nb_rows; _i < _ref1; i = _i += 1) {
          _results.push(0);
        }
        return _results;
      })();
      color = Rand.gen(0, 360);
      this.grid = new Grid(nb_columns, nb_rows, 0, cells, hsl(color, 100, 38));
      nb_clicks = (function() {
        switch (level) {
          case -1:
            return Math.rand(2, 4);
          case -2:
            return Math.rand(5, 6);
          case -3:
            return Math.rand(6, 8);
          case -4:
            return Math.rand(12, 18);
          case -5:
            return Math.rand(26, 40);
          default:
            return Math.rand(42, 78);
        }
      })();
      while (this.grid.is_empty()) {
        this.grid.random_click(nb_clicks);
      }
      this.grid.regen_grid();
    } else {
      this.grid.gen_grid();
    }
    this.resize();
  };

  return Game;

})();

new Game(parseInt(localStorage.getItem('go_level')));
