// Generated by CoffeeScript 1.7.1
var Mouse, Rand, Stopwatch, clone, get_offset, parse_csv,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Math.rand = function(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
};

window.rgb = function(r, g, b) {
  return 'rgb(' + r + ', ' + g + ', ' + b + ')';
};

window.hsl = function(h, s, l) {
  return 'hsl(' + h + ', ' + s + '%, ' + l + '%)';
};

window.rgba = function(r, g, b, a) {
  if (a == null) {
    a = 1;
  }
  return 'rgba(' + r + ', ' + g + ', ' + b + ', ' + a + ')';
};

window.hsla = function(h, s, l, a) {
  if (a == null) {
    a = 1;
  }
  return 'hsla(' + h + ', ' + s + '%, ' + l + '%, ' + a + ')';
};

parse_csv = function(txt, sep) {
  var line, lines, tab, _i, _len;
  if (sep == null) {
    sep = ',';
  }
  lines = txt.split(/\r\n|\n/);
  tab = [];
  for (_i = 0, _len = lines.length; _i < _len; _i++) {
    line = lines[_i];
    tab.push(line.split(sep));
  }
  return tab;
};

clone = function(arr) {
  return arr.slice(0);
};

Rand = {
  seed: 5,
  gen: function(min, max) {
    var rnd;
    max = max || 1;
    min = min || 0;
    Rand.seed = (Rand.seed * 9301 + 49297) % 233280;
    rnd = Rand.seed / 233280;
    return min + rnd * (max - min);
  }
};

if (!window.requestAnimationFrame) {
  window.requestAnimationFrame = (function() {
    return window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback, element) {
      return window.setTimeout(callback, 1000 / 60);
    };
  })();
}

get_offset = function(el) {
  var x, y;
  x = 0;
  y = 0;
  while (el && !isNaN(el.offsetLeft) && !isNaN(el.offsetTop)) {
    x += el.offsetLeft - el.scrollLeft;
    y += el.offsetTop - el.scrollTop;
    el = el.offsetParent;
  }
  return {
    top: y,
    left: x
  };
};

Mouse = (function() {
  function Mouse(el, scale) {
    if (scale == null) {
      scale = 1;
    }
    this.on_finger_move = __bind(this.on_finger_move, this);
    this.on_finger_down = __bind(this.on_finger_down, this);
    this.on_finger_up = __bind(this.on_finger_up, this);
    this.x = 0;
    this.y = 0;
    this.click = null;
    this.mtime = 0;
    this.el = el;
    this.loose = null;
    this.scale = scale;
    document.addEventListener('mousedown', this.on_finger_down, false);
    document.addEventListener('mousemove', this.on_finger_move, false);
    document.addEventListener('mouseup', this.on_finger_up, false);
    document.addEventListener('touchstart', this.on_finger_down, false);
    document.addEventListener('touchend', this.on_finger_move, false);
    document.addEventListener('touchmove', this.on_finger_up, false);
  }

  Mouse.prototype.update = function() {
    this.mtime++;
  };

  Mouse.prototype.on_finger_up = function(e) {
    this.loose = this.mtime;
    this.click = null;
  };

  Mouse.prototype.on_finger_down = function(e) {
    this.on_finger_move(e);
    this.click = this.mtime;
  };

  Mouse.prototype.on_finger_move = function(e) {
    var position_el;
    if (e.changedTouches) {
      e = e.changedTouches[0];
      if (e == null) {
        return;
      }
    }
    position_el = get_offset(this.el);
    this.x = Math.floor((e.pageX - (this.el != null ? position_el.left : 0)) / this.scale);
    this.y = Math.floor((e.pageY - (this.el != null ? position_el.top : 0)) / this.scale);
  };

  Mouse.prototype.up = function() {
    return this.click === null;
  };

  Mouse.prototype.down = function() {
    return this.click !== null;
  };

  Mouse.prototype.press = function() {
    return this.click === this.mtime;
  };

  Mouse.prototype.release = function() {
    return this.loose === this.mtime;
  };

  return Mouse;

})();

Stopwatch = (function() {
  function Stopwatch() {
    this.dt = 0;
    this.last = Date.now();
    this.time = 0;
  }

  Stopwatch.prototype.update = function() {
    this.dt = Date.now() - this.last;
    this.last = Date.now();
    this.time += this.dt;
    return this.dt /= 1000;
  };

  return Stopwatch;

})();
